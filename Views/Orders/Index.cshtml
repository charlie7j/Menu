@model IEnumerable<Order>

@{
    ViewData["Title"] = "قائمة الطلبات";
    Layout = "_LayoutDashboard";
}


<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-transparent border-0 d-flex justify-content-between align-items-center">
                    <h4 class="text-danger mb-0">
                        <i class="bi bi-cart me-2"></i>الطلبات
                    </h4>
                    <a asp-action="Create" class="btn btn-danger btn-sm">
                        <i class="bi bi-plus-lg me-1"></i>طلب جديد
                    </a>
                </div>
                <div class="card-body px-0">
                    <div class="table-responsive">
                        <table class="table align-items-center mb-0">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="text-uppercase text-danger text-xs font-weight-bolder">رقم الطلب</th>
                                    <th class="text-uppercase text-danger text-xs font-weight-bolder">رقم الطاولة</th>
                                    <th class="text-uppercase text-danger text-xs font-weight-bolder">وقت الطلب</th>
                                    <th class="text-uppercase text-danger text-xs font-weight-bolder">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td class="text-xs font-weight-bold ps-4">@item.OrderId</td>
                                        <td class="text-xs font-weight-bold">@item.TableNumber</td>
                                        <td class="text-xs font-weight-bold">@item.OrderDateTime.ToString("hh:mm tt")</td>
                                        <td>
                                            <a asp-action="Edit" asp-route-id="@item.OrderId" class="btn btn-outline-warning btn-sm">
                                                <i class="bi bi-pencil-square me-1"></i>تعديل
                                            </a>
                                            <a asp-action="Details" asp-route-id="@item.OrderId" class="btn btn-outline-info btn-sm">
                                                <i class="bi bi-eye me-1"></i>تفاصيل
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@item.OrderId" class="btn btn-outline-danger btn-sm">
                                                <i class="bi bi-trash3 me-1"></i>حذف
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .btn-create {
        background-color: #ff5b7d;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 15px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .btn-create i {
        font-size: 18px;
    }

    .nav-buttons {
        display: flex;
        gap: 10px;
    }

    .nav-buttons button {
        background-color: #6c7dfa;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 15px;
        cursor: pointer;
    }

    .month-display {
        font-size: 24px;
        font-weight: bold;
        color: #555;
    }

    .view-buttons {
        display: flex;
        gap: 10px;
    }

    .view-buttons button {
        background-color: #6c7dfa;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 15px;
        cursor: pointer;
    }

    .sidebar {
        width: 250px;
        float: right;
        margin-left: 20px;
    }

    .info-text {
        margin-bottom: 20px;
        color: #666;
    }

    .event-types {
        display: flex;
        gap: 10px;


    }

    .event-type {
        display: flex;
        align-items: center;
        padding: 10px;
        border-radius: 4px;
        cursor: pointer;
        width: 250px;
    }

    .event-type-circle {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        margin-left: 10px;
    }

    .help-section {
        margin-top: 40px;
        color: #666;
        font-weight: bold;
    }

    .tables-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
        border-collapse: collapse;
    }

    .grid-header {
        background-color: #f0f0f0;
        padding: 10px;
        text-align: center;
        font-weight: bold;
        border: 1px solid #ddd;
    }

    .table-cell {
        min-height: 100px;
        border: 1px dashed #ddd;
        padding: 5px;
        position: relative;
    }

    .table-number {
        position: absolute;
        top: 5px;
        right: 5px;
        color: #888;
    }

    .order-item {
        border-radius: 4px;
        padding: 8px;
        margin-bottom: 5px;
        cursor: grab;
        font-size: 14px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .order-item.dragging {
        opacity: 1;
        border: 1px solid rgb(65, 65, 65);
        height: 100%;
    }

    .order-actions {
        display: flex;
        gap: 5px;
    }

    .order-actions button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 16px;
        padding: 0;
        color: #555;
    }

    .status-free {
        background-color: #fbfbfba8;
    }

    .status-reserved {
        background-color: #fbacbd;
    }

    .status-occupied {
        background-color: #f7edb9;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 100;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .modal-title {
        font-size: 18px;
        font-weight: bold;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-group input,
    .form-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
        gap: 10px;
    }

    .modal-btn {
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-save {
        background-color: #4caf50;
        color: white;
    }

    .btn-cancel {
        background-color: #f44336;
        color: white;
    }

    .order-details-modal-content {
        padding: 20px;
    }

    .order-details-modal-content p {
        margin-bottom: 10px;
    }
</style>


<div class="container shadow-lg bg-white py-4 rounded-3">
    <div class="header">
        <button class="btn-create" onclick="openNewOrderModal()">
            <span>+</span> إنشاء طلب جديد
        </button>

        <div class="event-types" style="padding-right: 20px;">
            <div class="event-type" style="background-color: #e0fff0;">
                <div class="event-type-circle" style="background-color: #1de9b6;"></div>
                <span>طاولة مشغولة</span>
            </div>
            <div class="event-type" style="background-color: #e0e8ff;">
                <div class="event-type-circle" style="background-color: #4285f4;"></div>
                <span>طلب جديد</span> @* This might be redundant now? Or represents orders in the list? *@
            </div>
            <div class="event-type" style="background-color: #ffecf0;">
                <div class="event-type-circle" style="background-color: #ff5b7d;"></div>
                <span>طاولة محجوزة</span>
            </div>
            </div>
        </div>

    <div class="content-wrapper">
        <div class="sidebar" style="overflow-y: scroll;height: 500px;overflow-x: hidden;">
            <div class="orders-list" style="padding-right: 30px;">
                @* Only display orders here that DON'T have a valid TableNumber assigned *@
                @foreach (var item in Model) // Adjust condition based on your model (e.g., o.TableNumber == null)
                {
                    <div class="order-item row" draggable="true" ondragstart="drag(event)" id="order-@item.OrderId">
                        @* Adjust the display text based on your Order model properties *@
                        <div class="col-md-10">#Order :@item.OrderId </div>
                        <div class="order-actions col-md-2">
                            <button title="تفاصيل" onclick="showOrderDetails('order-@item.OrderId')">👁️</button>
                            @* Optional: Add cancel/move buttons here if needed for unassigned orders *@
                            @* <button title="إلغاء" onclick="cancelOrder(this.closest('.order-item'))">🗑️</button> *@
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="tables-container">
            <div class="tables-grid">
                @for (int i = 1; i < 31; i++)
                {
                    // Find orders specifically for this table number 'i'
                    var ordersForThisTable = Model.Where(o => o.TableNumber == i).ToList();

                    // Determine the initial status based on whether there are orders
                    // You might need more complex logic if you also track "reserved" status via the Order model
                    string initialStatusClass = ordersForThisTable.Any() ? "status-occupied" : "status-free";
                    // Example: If an Order has a Status property:
                    // string initialStatusClass = "status-free";
                    // if (ordersForThisTable.Any()) {
                    //     initialStatusClass = ordersForThisTable.First().Status == OrderStatus.Reserved ? "status-reserved" : "status-occupied";
                    // }


                    <div class="table-cell @initialStatusClass" data-table-number="@i" ondrop="drop(event)" ondragover="allowDrop(event)" onclick="showTableDetailsModal(@i)">
                        <div class="table-number">@i</div>

                        @* Render the orders assigned to this table directly inside the cell *@
                        @foreach (var order in ordersForThisTable)
                        {
                             <div class="order-item row" draggable="true" ondragstart="drag(event)" id="order-@order.OrderId">
                                @* Adjust display text as needed *@
                                <div class="col-md-10">#Order :@order.OrderId </div>
                                @* Include all actions for orders within tables *@
                                <div class="order-actions col-md-2">
                                    <button title="تفاصيل" onclick="showOrderDetails('order-@order.OrderId')">👁️</button>
                                    <button title="إلغاء" onclick="cancelOrder(this.closest('.order-item'))">🗑️</button>
                                    <button title="للدفع" onclick="moveToPayment(this.closest('.order-item'))">💰</button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* Modals remain the same (orderModal, tableDetailsModal, orderDetailsModal) *@
<div class="modal" id="orderModal">
    @* ... modal content ... *@
</div>

<div class="modal" id="tableDetailsModal">
     @* ... modal content ... *@
</div>

<div class="modal" id="orderDetailsModal">
    @* ... modal content ... *@
</div>


@* --- JavaScript Section --- *@
<script>
    //let currentOrdersData = []; // This might not be needed if data comes directly from rendered HTML

    // وظائف السحب والإفلات
    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
        // Add a class for visual feedback while dragging
        setTimeout(() => { // Use timeout to ensure class is added after drag operation starts
            ev.target.classList.add("dragging");
        }, 0);
    }

    function drop(ev) {
        ev.preventDefault();
        const orderId = ev.dataTransfer.getData("text");
        const draggedElement = document.getElementById(orderId);
        const targetTable = ev.currentTarget; // The table-cell being dropped onto

        if (!draggedElement || !targetTable || !targetTable.classList.contains('table-cell')) {
             console.error("Drop target is not a valid table cell or dragged element not found.");
             if(draggedElement) draggedElement.classList.remove("dragging"); // Clean up visual feedback
             return;
        }

        draggedElement.classList.remove("dragging"); // Remove visual feedback

        const previousParent = draggedElement.parentElement;

        // Check if the target table is different from the source (if it came from a table)
        if (targetTable === previousParent) {
            return; // Dropped onto the same table it came from
        }

        // Append the dragged order element to the target table
        targetTable.appendChild(draggedElement);

        // Ensure action buttons are present (especially if dragged from sidebar)
        ensureOrderActions(draggedElement, orderId);

        // Update status of the target table
        updateTableStatusElement(targetTable, "occupied"); // Or determine status based on other factors if needed

        // Update status of the source container (if it was a table cell)
        if (previousParent && previousParent.classList.contains("table-cell")) {
            if (previousParent.querySelectorAll(".order-item").length === 0) {
                updateTableStatusElement(previousParent, "free");
            }
        }

        // Optional: You might want to update the underlying data model via an AJAX call here
        // Example: updateOrderTableOnServer(orderId, targetTable.dataset.tableNumber);
    }


    // Helper function to ensure action buttons exist on an order item
    function ensureOrderActions(orderItem, orderId) {
         let actionsDiv = orderItem.querySelector(".order-actions");
         if (!actionsDiv) {
            // If actions are missing (e.g., dragged from a simplified sidebar item), add them
            actionsDiv = document.createElement("div");
            actionsDiv.className = "order-actions col-md-2";
             // Add the standard buttons for table orders
            actionsDiv.innerHTML = `
                <button title="تفاصيل" onclick="showOrderDetails('${orderId}')">👁️</button>
                <button title="إلغاء" onclick="cancelOrder(this.closest('.order-item'))">🗑️</button>
                <button title="للدفع" onclick="moveToPayment(this.closest('.order-item'))">💰</button>
            `;
            // Ensure the main content div exists correctly
            let contentDiv = orderItem.querySelector('.col-md-10');
            if(contentDiv) {
                 orderItem.appendChild(actionsDiv); // Append actions after content
            } else {
                // Handle cases where the structure might be simpler (e.g., just text)
                 console.warn("Order item structure might be incomplete. Adding actions.", orderItem);
                 orderItem.appendChild(actionsDiv);
            }
         }
         // Ensure the parent row class is present for layout
         if (!orderItem.classList.contains('row')) {
            orderItem.classList.add('row');
         }
    }


    // (Deprecated - Replaced by direct rendering in Razor)
    /* function addOrderToTable(tableCell, orderText, orderId) { ... } */


    // وظيفة تحديث حالة عنصر الطاولة المرئية
    function updateTableStatusElement(tableCell, status) {
        if (!tableCell || !tableCell.classList.contains('table-cell')) return;
        tableCell.classList.remove("status-free", "status-reserved", "status-occupied");
        tableCell.classList.add(`status-${status}`);

        // You might want to also update the status in the details modal if it's open for this table
        const detailsModal = document.getElementById("tableDetailsModal");
        if (detailsModal.style.display === "flex" && detailsModal.dataset.tableNumber === tableCell.dataset.tableNumber) {
            document.getElementById("detailsTableStatus").value = status;
        }
    }

    // وظائف النافذة المنبثقة (Modal) الخاصة بإنشاء طلب جديد
    function openNewOrderModal() {
        document.getElementById("orderModal").style.display = "flex";
        resetNewOrderForm(); // Reset form when opening
    }

    function closeOrderModal() {
        document.getElementById("orderModal").style.display = "none";
        // No need to call reset here if called on open
    }

    function resetNewOrderForm() {
        document.getElementById("orderNumber").value = ""; // Consider generating this server-side or differently
        document.getElementById("orderDescription").value = "";
        document.getElementById("tableNumber").value = ""; // Default to no table selected
        document.getElementById("initialTableStatus").value = "occupied"; // Default status if table selected
        // Hide/show status based on table selection?
        document.getElementById("tableNumber").onchange = () => {
             const statusSelect = document.getElementById("initialTableStatus");
             if (document.getElementById("tableNumber").value) {
                 statusSelect.closest('.form-group').style.display = ''; // Show status
             } else {
                  statusSelect.closest('.form-group').style.display = 'none'; // Hide status if no table
             }
        };
        // Initial check
        document.getElementById("initialTableStatus").closest('.form-group').style.display = 'none';
    }

    function saveNewOrder() {
        const orderNumber = document.getElementById("orderNumber").value; // This should likely be an ID generated server-side upon saving
        const orderDescription = document.getElementById("orderDescription").value;
        const tableNumber = document.getElementById("tableNumber").value;
        const initialTableStatus = document.getElementById("initialTableStatus").value;

        // Basic validation
        if (!orderDescription) { // Order number might be generated later
            alert("يرجى إدخال وصف الطلب على الأقل");
            return;
        }

        // ***** IMPORTANT: Saving Logic *****
        // This function should ideally send the data to the server via an AJAX call (fetch or XMLHttpRequest)
        // The server would then:
        // 1. Create the new Order record in the database.
        // 2. Get the new Order ID.
        // 3. Return the new Order details (including ID) to the client.
        // The client-side JavaScript would then use the response to create the visual element.

        // --- Client-side Simulation (Replace with AJAX) ---
        const newOrderId = "order-new" + Date.now(); // Temporary client-side ID
        const orderText = `#Order New: ${orderDescription}`; // Simulate display text

        console.log("Simulating save:", { orderNumber, orderDescription, tableNumber, initialTableStatus });

        if (tableNumber) {
            const tableCells = document.querySelectorAll(".table-cell");
            let targetCell = null;
            for (const cell of tableCells) {
                // Use dataset for reliability
                if (cell.dataset.tableNumber === tableNumber) {
                    targetCell = cell;
                    break;
                }
            }
             if (targetCell) {
                // Create and add the new order item element visually
                const newOrderItem = createOrderItemElement(newOrderId, orderText, true); // true = include table actions
                targetCell.appendChild(newOrderItem);
                updateTableStatusElement(targetCell, initialTableStatus);
            } else {
                 console.error("Target table cell not found for number:", tableNumber);
                 alert("لم يتم العثور على الطاولة المحددة.");
                 return; // Stop if table not found
            }

        } else {
            // Add to the sidebar list
            const ordersList = document.querySelector(".orders-list");
            const newOrderItem = createOrderItemElement(newOrderId, orderText, false); // false = only basic actions for sidebar
            ordersList.appendChild(newOrderItem);
        }
        // --- End Simulation ---

        closeOrderModal();
        // After successful AJAX save: Use the actual ID and data returned from server
    }

    // Helper function to create order item DOM element
    function createOrderItemElement(orderId, orderText, includeTableActions) {
        const orderItem = document.createElement("div");
        orderItem.className = "order-item row";
        orderItem.draggable = true;
        orderItem.id = orderId;
        orderItem.setAttribute("ondragstart", "drag(event)");

        const contentDiv = document.createElement("div");
        contentDiv.className = "col-md-10";
        contentDiv.innerText = orderText;
        orderItem.appendChild(contentDiv);

        const actionsDiv = document.createElement("div");
        actionsDiv.className = "order-actions col-md-2";

        // Always include details button
        actionsDiv.innerHTML = `<button title="تفاصيل" onclick="showOrderDetails('${orderId}')">👁️</button>`;

        if (includeTableActions) {
            // Add cancel and payment buttons for orders within tables
            actionsDiv.innerHTML += `
                <button title="إلغاء" onclick="cancelOrder(this.closest('.order-item'))">🗑️</button>
                <button title="للدفع" onclick="moveToPayment(this.closest('.order-item'))">💰</button>
            `;
        } else {
             // Optionally add specific actions for sidebar items if needed
              // actionsDiv.innerHTML += `<button title="Assign Table" onclick="assignTable('${orderId}')">📌</button>`;
        }

        orderItem.appendChild(actionsDiv);
        return orderItem;
    }


    // وظائف النافذة المنبثقة (Modal) الخاصة بتفاصيل الطاولة
    function showTableDetailsModal(tableNumber) {
        const modal = document.getElementById("tableDetailsModal");
        const title = document.getElementById("tableDetailsTitle");
        const tableNumberInput = document.getElementById("detailsTableNumber");
        const tableStatusSelect = document.getElementById("detailsTableStatus");
        const currentOrdersDiv = document.getElementById("currentOrders");

        // Find the correct table cell using data attribute
        const targetCell = document.querySelector(`.table-cell[data-table-number='${tableNumber}']`);

        if (!targetCell) {
            console.error("Table cell not found for details modal:", tableNumber);
            return;
        }

        title.innerText = `تفاصيل الطاولة ${tableNumber}`;
        tableNumberInput.value = tableNumber;
        // Determine status from class list
        tableStatusSelect.value = targetCell.classList.contains("status-free") ? "free" :
            targetCell.classList.contains("status-reserved") ? "reserved" : "occupied";

        currentOrdersDiv.innerHTML = ""; // Clear previous orders
        const orders = targetCell.querySelectorAll(".order-item");
        if (orders.length === 0) {
            currentOrdersDiv.innerHTML = "<p>لا توجد طلبات حالية لهذه الطاولة.</p>";
        } else {
            orders.forEach(order => {
                // Clone the order item to show in the modal without moving it
                const orderClone = order.cloneNode(true);
                // Make sure cloned buttons still work or disable them if needed
                // For simplicity, we'll just display the info
                orderClone.removeAttribute('draggable'); // Not draggable within modal
                orderClone.removeAttribute('ondragstart');
                // Disable buttons within the modal clone if necessary
                orderClone.querySelectorAll('button').forEach(btn => {
                     // Example: btn.disabled = true; or adjust onclick if needed
                     // Re-attaching onclick might be complex, easier to just show info
                });
                 // Add some styling for the modal list
                 orderClone.style.marginBottom = '5px';
                 orderClone.style.border = '1px solid #eee';
                 orderClone.style.padding = '5px';

                currentOrdersDiv.appendChild(orderClone);
            });
        }

        modal.style.display = "flex";
        modal.dataset.tableNumber = tableNumber; // Store table number for status updates
    }

    function closeTableDetailsModal() {
        document.getElementById("tableDetailsModal").style.display = "none";
    }

    function updateTableStatusFromDetails() {
        const modal = document.getElementById("tableDetailsModal");
        const tableNumber = modal.dataset.tableNumber;
        const newStatus = document.getElementById("detailsTableStatus").value;

        const targetCell = document.querySelector(`.table-cell[data-table-number='${tableNumber}']`);
        if (targetCell) {
            // Check if changing to 'free' is allowed if orders exist
             if (newStatus === 'free' && targetCell.querySelector('.order-item')) {
                 alert("لا يمكن تحديد الحالة 'شاغرة' والطاولة تحتوي على طلبات.");
                 // Revert selection
                 document.getElementById("detailsTableStatus").value = targetCell.classList.contains("status-reserved") ? "reserved" : "occupied";
                 return;
             }

            // Check if changing from 'free' requires an order (might be too strict)
            // if (newStatus !== 'free' && !targetCell.querySelector('.order-item')) {
            //    alert("Table status cannot be set to occupied/reserved without orders.");
            //    document.getElementById("detailsTableStatus").value = 'free';
            //    return;
            // }

            updateTableStatusElement(targetCell, newStatus);

            // Optional: Update status on the server via AJAX
            // updateTableStatusOnServer(tableNumber, newStatus);
        } else {
            console.error("Target cell not found for status update from details modal:", tableNumber);
        }
    }

    // وظائف التعامل مع الطلبات داخل الطاولة
    /* function showOrderOptions(orderItem) { ... } // Likely replaced by direct buttons */

    function cancelOrder(orderItemElement) {
        if (!orderItemElement) return;
        // Find the parent container (table cell or sidebar list)
        const parentContainer = orderItemElement.closest('.table-cell, .orders-list');
        const orderTextElement = orderItemElement.querySelector('.col-md-10');
        const orderText = orderTextElement ? orderTextElement.innerText : `الطلب ${orderItemElement.id}`;

        if (confirm(`هل أنت متأكد من إلغاء الطلب: ${orderText}؟`)) {
            // Optional: Call server via AJAX to delete/cancel the order first
            // deleteOrderOnServer(orderItemElement.id).then(() => { ... });

            // Remove the element visually
            orderItemElement.remove();

            // If the parent was a table cell, check if it's now empty and update status
            if (parentContainer && parentContainer.classList.contains('table-cell')) {
                if (parentContainer.querySelectorAll(".order-item").length === 0) {
                    updateTableStatusElement(parentContainer, "free");
                }
            }
            // }); // Close server call block
        }
    }

    function moveToPayment(orderItemElement) {
         if (!orderItemElement) return;
        const parentContainer = orderItemElement.closest('.table-cell, .orders-list');
        const orderTextElement = orderItemElement.querySelector('.col-md-10');
        const orderText = orderTextElement ? orderTextElement.innerText : `الطلب ${orderItemElement.id}`;

        // Simulate moving to payment (In reality, might trigger another process/modal)
        alert(`سيتم تحويل الطلب: ${orderText} للدفع.`);

        // Optional: Call server via AJAX to mark order as 'pending payment' or similar
        // markOrderForPaymentOnServer(orderItemElement.id).then(() => { ... });

        // Remove the element visually after marking for payment
        orderItemElement.remove();

        // If the parent was a table cell, check if it's now empty
        if (parentContainer && parentContainer.classList.contains('table-cell')) {
            if (parentContainer.querySelectorAll(".order-item").length === 0) {
                updateTableStatusElement(parentContainer, "free");
            }
        }
         // }); // Close server call block
    }

    // وظيفة عرض تفاصيل الطلب (Modal)
    function showOrderDetails(orderId) {
        const modal = document.getElementById("orderDetailsModal");
        const contentDiv = document.getElementById("orderDetailsContent");
        const orderElement = document.getElementById(orderId); // Find the element in the main page

        // Clear previous content
        contentDiv.innerHTML = '<p>جارٍ تحميل التفاصيل...</p>';

        if (orderElement) {
             // Extract details from the element's content
             const orderTextElement = orderElement.querySelector('.col-md-10');
             const orderFullText = orderTextElement ? orderTextElement.innerText : 'غير متوفر';

             // Extract Order ID number more robustly
             let orderIdNumber = orderId.replace('order-', ''); // Basic extraction
             const idMatch = orderFullText.match(/#Order\s*:\s*(\S+)/); // Try to get ID from text if format is consistent
             if(idMatch && idMatch[1]) {
                 orderIdNumber = idMatch[1];
             }

             // Extract description (assuming format like "#Order :ID - Description")
             const descriptionMatch = orderFullText.match(/-\s*(.*)$/);
             const description = descriptionMatch && descriptionMatch[1] ? descriptionMatch[1].trim() : '(لا يوجد وصف إضافي)';


             // Populate the modal
            // In a real app, you'd fetch more details via AJAX using orderId
            // fetch(`/api/orders/${orderIdNumber}`)
            //   .then(response => response.json())
            //   .then(data => {
            //        contentDiv.innerHTML = `
            //            <p><b>رقم الطلب:</b> ${data.id}</p>
            //            <p><b>الوصف:</b> ${data.description}</p>
            //            <p><b>الحالة:</b> ${data.status}</p>
            //            <p><b>الطاولة:</b> ${data.tableNumber || 'غير محددة'}</p>
            //            <p><b>العناصر:</b></p><ul>${data.items.map(item => `<li>${item.name} - ${item.quantity}</li>`).join('')}</ul>
            //            <p><b>إجمالي السعر:</b> ${data.totalPrice}</p>
            //        `;
            //   })
            //   .catch(error => {
            //        console.error("Error fetching order details:", error);
            //        contentDiv.innerHTML = `<p>حدث خطأ أثناء تحميل تفاصيل الطلب.</p>`;
            //   });

             // --- Simulation using existing info ---
             contentDiv.innerHTML = `
                 <p><b>رقم الطلب (ID):</b> ${orderIdNumber}</p>
                 <p><b>المحتوى/الوصف:</b> ${description}</p>
                 <p><b>النص الكامل:</b> ${orderFullText}</p>
                 <p><i>(يتم عرض التفاصيل الأساسية. يمكن إضافة المزيد من المعلومات هنا.)</i></p>
             `;
             // --- End Simulation ---

            modal.style.display = "flex";
        } else {
             console.error("Element with ID " + orderId + " not found for details.");
             contentDiv.innerHTML = `<p>لم يتم العثور على عنصر الطلب بالمعرف ${orderId}.</p>`;
             modal.style.display = "flex"; // Show modal with error message
        }
    }


    function closeOrderDetailsModal() {
        document.getElementById("orderDetailsModal").style.display = "none";
    }

    // --- Initial Setup ---
    document.addEventListener('DOMContentLoaded', (event) => {
        // Add dragend listener to clean up dragging class if drag fails or is cancelled
         document.body.addEventListener('dragend', (ev) => {
            if (ev.target.classList.contains('order-item')) {
                ev.target.classList.remove('dragging');
            }
        });

        // Initial setup for the new order form (hide status if no table selected)
         resetNewOrderForm(); // Call once on load
    });


</script>